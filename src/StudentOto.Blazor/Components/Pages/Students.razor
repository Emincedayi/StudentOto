@page "/students"
@using StudentOto.Application.Contracts
@using StudentOto.Application.Contracts.Dtos
@inject IStudentAppService StudentAppService
@inject INotificationService NotificationService

<h3>Öğrenciler</h3>

<button class="btn btn-primary mb-2" @onclick="AddStudent">Yeni Öğrenci</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Adı</th>
            <th>Email</th>
            <th>Doğum Tarihi</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr>
                <td>@student.Name</td>
                <td>@student.Email</td>
                <td>@student.DateOfBirth.ToShortDateString()</td>
                <td>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditStudent(student)">Düzenle</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteStudent(student.Id)">Sil</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (editingStudent != null)
{
    <div class="card mt-3 p-3">
        <h5>@(editingStudent.Id == Guid.Empty ? "Yeni Öğrenci Ekle" : "Öğrenci Düzenle")</h5>
        <div class="mb-2">
            <label>Adı:</label>
            <input class="form-control" @bind="editingStudent.Name" />
        </div>
        <div class="mb-2">
            <label>Email:</label>
            <input class="form-control" @bind="editingStudent.Email" />
        </div>
        <div class="mb-2">
            <label>Doğum Tarihi:</label>
            <input type="date" class="form-control" @bind="editingStudent.DateOfBirth" />
        </div>
        <button class="btn btn-success me-2" @onclick="SaveStudent">Kaydet</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">İptal</button>
    </div>
}

@code {
    private List<StudentDto> students = new();
    private StudentDto editingStudent;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        students = await StudentAppService.GetListAsync();
    }

    private void AddStudent()
    {
        editingStudent = new StudentDto { DateOfBirth = DateTime.Today };
    }

    private void EditStudent(StudentDto student)
    {
        editingStudent = new StudentDto
        {
            Id = student.Id,
            Name = student.Name,
            Email = student.Email,
            DateOfBirth = student.DateOfBirth
        };
    }

    private void CancelEdit()
    {
        editingStudent = null;
    }

    private async Task SaveStudent()
    {
        if (editingStudent.Id == Guid.Empty)
        {
            await StudentAppService.CreateAsync(editingStudent);
            await NotificationService.Success("Öğrenci eklendi!");
        }
        else
        {
            await StudentAppService.UpdateAsync(editingStudent.Id, editingStudent);
            await NotificationService.Success("Öğrenci güncellendi!");
        }

        editingStudent = null;
        await LoadStudents();
    }

    private async Task DeleteStudent(Guid id)
    {
        await StudentAppService.DeleteAsync(id);
        await NotificationService.Success("Öğrenci silindi!");
        await LoadStudents();
    }
}
