@page "/courses"
@using StudentOto.Application.Contracts.Dtos
@using StudentOto.Application.Contracts.Services
@using StudentOto.Dtos
@inject ICourseAppService CourseAppService
@inject ITeacherAppService TeacherAppService
@inject INotificationService NotificationService

<h3>Dersler</h3>

<button class="btn btn-primary mb-2" @onclick="AddCourse">Yeni Ders</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Başlık</th>
            <th>Öğretmen</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in courses)
        {
            <tr>
                <td>@course.Title</td>
                <td>@course.TeacherName</td>
                <td>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditCourse(course)">Düzenle</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteCourse(course.Id)">Sil</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (editingCourse != null)
{
    <div class="card mt-3 p-3">
        <h5>@(editingCourse.Id == Guid.Empty ? "Yeni Ders Ekle" : "Ders Düzenle")</h5>
        <div class="mb-2">
            <label>Başlık:</label>
            <input class="form-control" @bind="editingCourse.Title" />
        </div>
        <div class="mb-2">
            <label>Öğretmen:</label>
            <select class="form-select" @bind="editingCourse.TeacherId">
                <option value="">Seçiniz</option>
                @foreach (var t in teachers)
                   { <option value="@t.Id">@t.Name</option> }
            </select>
        </div>
        <button class="btn btn-success me-2" @onclick="SaveCourse">Kaydet</button>
        <button class="btn btn-secondary" @onclick="CancelEdit">İptal</button>
    </div>
}

@code {
    private List<CourseDto> courses = new();
    private List<TeacherDto> teachers = new();
    private CourseDto editingCourse;

    protected override async Task OnInitializedAsync()
    {
        teachers = await TeacherAppService.GetListAsync();
        await LoadCourses();
    }

    private async Task LoadCourses() => courses = await CourseAppService.GetListAsync();

    private void AddCourse() => editingCourse = new CourseDto();

    private void EditCourse(CourseDto course) => editingCourse = new CourseDto
    {
        Id = course.Id,
        Title = course.Title,
        TeacherId = course.TeacherId
    };

    private void CancelEdit() => editingCourse = null;

    private async Task SaveCourse()
    {
        if (editingCourse.Id == Guid.Empty)
            await CourseAppService.CreateAsync(editingCourse);
        else
            await CourseAppService.UpdateAsync(editingCourse.Id, editingCourse);

        editingCourse = null;
        await LoadCourses();
        await NotificationService.Success("İşlem başarıyla tamamlandı!");
    }

    private async Task DeleteCourse(Guid id)
    {
        await CourseAppService.DeleteAsync(id);
        await LoadCourses();
        await NotificationService.Success("Ders silindi!");
    }
}
